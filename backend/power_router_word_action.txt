            # preview and execute via automation router; guard exceptions so this route never 500s
            try:
                # If no save_target provided and we have chat_id, create a stable path per chat
                p2 = dict(params)
                
                # Process save_target path based on user input
                if p2.get('save_target'):
                    # Use the new path resolver function for more flexible path handling
                    p2['save_target'] = _resolve_save_path(p2['save_target'], getattr(req, 'chat_id', None))
                elif getattr(req, 'chat_id', None):
                    # Default to Documents/SarvajnaGPT folder with a chat-specific filename
                    docs_folder = _get_standard_user_folder('documents')
                    target_folder = docs_folder / 'SarvajnaGPT'
                    target_folder.mkdir(exist_ok=True)
                    filename = f"{req.chat_id}_{uuid.uuid4().hex[:8]}.docx"
                    p2['save_target'] = str(target_folder / filename)
                
                # Always set split_screen and CUA parameters for consistent behavior
                p2['split_screen'] = p2.get('split_screen', True)
                p2['use_os_snap_keys'] = p2.get('use_os_snap_keys', True)
                p2['use_cua_for_selection'] = p2.get('use_cua_for_selection', True)
                p2['arrangement_delay_ms'] = p2.get('arrangement_delay_ms', 800)
                p2['word_side'] = p2.get('word_side', 'right')
                
                prev = auto_word_preview(type("Obj", (), p2))
            except Exception as e:
                results.append({"type": atype, "error": f"preview failed: {e}"})
                continue
            try:
                res = auto_word_execute(type("Obj", (), p2))
                # Update chat_state with saved_path if present
                try:
                    saved = (res or {}).get('saved_path')
                    if saved and getattr(req, 'chat_id', None):
                        _chat_state_upsert(req.chat_id, getattr(req, 'service', None), None, saved)
                except Exception:
                    pass
                results.append({"type": atype, "preview": prev, "result": res})
            except Exception as e:
                # Fallback: create a .docx via python-docx and open it, so user still sees Word
                try:
                    text = p2.get('text') or ''
                    
                    # Handle fallback save path with the new path resolver
                    if p2.get('save_target'):
                        raw_target = p2.get('save_target')
                    else:
                        # Use Documents folder with SarvajnaGPT subfolder by default
                        docs_folder = _get_standard_user_folder('documents')
                        target_folder = docs_folder / 'SarvajnaGPT'
                        target_folder.mkdir(exist_ok=True)
                        chat_id = getattr(req, 'chat_id', None)
                        filename = f"{chat_id if chat_id else 'document'}_{uuid.uuid4().hex[:8]}.docx"
                        raw_target = str(target_folder / filename)
                    
                    # Convert to a relative path for word_router
                    # First try to make it relative to agent_output
                    try:
                        rel_path = os.path.relpath(raw_target, AGENT_BASE_DIR)
                        safe_target = rel_path
                    except ValueError:
                        # If it's on a different drive, use the filename only
                        filename = os.path.basename(raw_target)
                        safe_target = os.path.join('docs', filename if filename else f"output_{uuid.uuid4().hex[:8]}.docx")
                    
                    if not safe_target.lower().endswith('.docx'):
                        safe_target += '.docx'
                        
                    f_prev = word_preview(type("Obj", (), {"target_rel": safe_target, "paragraph": text}))
                    f_res = word_execute(type("Obj", (), {"target_rel": safe_target, "paragraph": text}))
                    
                    try:
                        if getattr(req, 'chat_id', None):
                            # Construct absolute path like word_execute returns
                            created_path = (f_res or {}).get('path')
                            if created_path:
                                _chat_state_upsert(req.chat_id, getattr(req, 'service', None), None, created_path)
                    except Exception:
                        pass